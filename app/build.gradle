apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

// Check dependencies.
// https://github.com/ben-manes/gradle-versions-plugin
apply plugin: 'com.github.ben-manes.versions'

// Fabric
apply plugin: 'io.fabric'

apply from: '../config/quality/quality.gradle'
apply from: '../config/signing/signing.gradle'


def makeVersionCodeForDensity = { densityName ->
    // Assign different version code for each output

    // Version code patch:             XX  // [1;2] digits
    // Version code minor:          XX_00  // [2;3] digits
    // Version code major:      XXX_00_00  // [3;5] digit
    // Version code density:  X_000_00_00  // {5} digits

    // Version code: d_MMM_mm_pp with
    //  - d: density code
    //  - MMM: major code
    //  - mm: minor code
    //  - pp: patch code

    // Min version code:  1_000_00_00
    // Max version code:  6_999_99_99

    def densityCodes = [all: 1, mdpi: 2, hdpi: 3, xhdpi: 4, xxhdpi: 5, xxxhdpi: 6]

    def key = densityName == null ? "all" : densityName
    return densityCodes.get(key) * 1_000_00_00 + rootProject.ext.appVersionCode
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.mercandalli.android.browser"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.appVersionCode
        versionName rootProject.ext.appVersionName + "." + new Date().format('yyyyMMdd')
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs "en", "fr", "pt-rBR"
    }

    dexOptions {
        // 4 Gigabytes is a maximum heap size for dex operation
        // http://stackoverflow.com/questions/33750404/android-gradle-what-is-javamaxheapsize-4g
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        releaseSigningConfig rootProject.ext.releaseTubeSigningConfig
    }

    buildTypes {
        release {
            signingConfig signingConfigs.releaseSigningConfig
            minifyEnabled true
            shrinkResources true
            multiDexEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            versionNameSuffix ".dev"
        }
    }

    flavorDimensions "density"

    productFlavors {
        // Dimension flavors
        universal {
            dimension "density"
            versionCode makeVersionCodeForDensity('all')
        }
        mdpi {
            dimension "density"
            resConfigs "mdpi"
            versionCode makeVersionCodeForDensity('mdpi')
        }
        hdpi {
            dimension "density"
            resConfigs "hdpi"
            versionCode makeVersionCodeForDensity('hdpi')
        }
        xhdpi {
            dimension "density"
            resConfigs "xhdpi"
            versionCode makeVersionCodeForDensity('xhdpi')
        }
        xxhdpi {
            dimension "density"
            resConfigs "xxhdpi"
            versionCode makeVersionCodeForDensity('xxhdpi')
        }
        xxxhdpi {
            dimension "density"
            resConfigs "xxxhdpi"
            versionCode makeVersionCodeForDensity('xxxhdpi')
        }
    }

    sourceSets {
        main {
            // Split resources.
            // https://medium.com/google-developer-experts/android-project-structure-alternative-way-29ce766682f0#.sjnhetuhb
            res.srcDirs = [
                    'src/main/res/browser',
                    'src/main/res/common',
                    'src/main/res/dialog',
                    'src/main/res/icon',
                    'src/main/res/main',
                    'src/main/res/settings'
            ]
        }

        // Everything related to connected test live in src/androidTest/core/java
        androidTest.java.srcDir 'src/androidTest/core/java'

        // Instrumented unit tests live in src/androidTest/unit
        androidTest.java.srcDir 'src/androidTest/unit/java'

        // Instrumented integration tests live in src/androidTest/integration
        androidTest.java.srcDir 'src/androidTest/integration/java'

        // Instrumented use cases tests live in src/androidTest/usecases
        androidTest.java.srcDir 'src/androidTest/usecases/java'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":monetization")

    // Language
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

    // Android - Support
    implementation "androidx.annotation:annotation:1.0.0-rc02"
    implementation "androidx.appcompat:appcompat:1.0.0-rc02"
    implementation "com.google.android.material:material:1.0.0-rc02"
    implementation "androidx.cardview:cardview:1.0.0-rc02"
    implementation "androidx.recyclerview:recyclerview:1.0.0-rc02"

    // Google
    implementation 'com.google.firebase:firebase-core:16.0.3'
    implementation "com.google.firebase:firebase-config:16.0.0"

    // Third party - Monitoring
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.4@aar') {
        transitive = true
    }

    // Third party - UI
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    kapt 'com.github.bumptech.glide:compiler:4.8.0'
    implementation 'com.hannesdorfmann:adapterdelegates3:3.0.1'

    // Testing-only dependencies
    androidTestImplementation "androidx.annotation:annotation:1.0.0-rc02"
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test:rules:1.1.0-alpha4'
    // Test - take screenshot, output tests...
    // https://github.com/square/spoon
    androidTestImplementation 'com.squareup.spoon:spoon-client:1.7.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.0-alpha4'
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.1.0-alpha4') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.22.0'
}

// Spoon
if (rootProject.ext.spoonEnable) {

    // Test - take screenshot, output tests...
    // https://github.com/square/spoon
    apply plugin: 'spoon'

    // Test - take screenshot, output tests...
    // https://github.com/square/spoon
    spoon {
        // Enable debug output
        debug = true

        // Disable gif
        noAnimations = true

        // Set custom test reports directory (defaults to "spoon")
        baseOutputDir = file("$buildDir/spoon-custom-report-dir")

        // Enable setting test class/method-to-be-run from command line. E.g.:
        // $> ../gradlew spoonFreeDebugTest -PspoonClassName=com.stanfy.spoon.example.test.MainActivityTest -PspoonMethodName=testSetText
        if (project.hasProperty('spoonClassName')) {
            className = project.spoonClassName

            if (project.hasProperty('spoonMethodName')) {
                methodName = project.spoonMethodName
            }
        }

        // You can pass instrumentation arguments. Tests in this example assert this pair is passed.
        instrumentationArgs = ["foo=bar"]

        // It's also possible to configure tests sharding using convenient properties:
        // numShards = 2
        // shardIndex = 0
        adbTimeout = 30
    }
}

apply plugin: 'com.google.gms.google-services'